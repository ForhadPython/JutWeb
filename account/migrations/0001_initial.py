# Generated by Django 3.2 on 2022-02-19 19:11

import account.models
from django.db import migrations, models
import django_countries.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='ResetPasswordIndex',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reset_id', models.SlugField(default=account.models.get_hash_path, max_length=64, unique=True)),
                ('email', models.EmailField(max_length=254)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('expire_hours', models.IntegerField(default=24)),
                ('used', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='TempUserBeforeActive',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slug', models.SlugField(default=account.models.get_hash_path, max_length=64, unique=True)),
                ('email', models.EmailField(max_length=254)),
                ('hash_object', models.TextField()),
                ('is_active', models.IntegerField(choices=[(1, 'Active'), (2, 'Inactive')], default=1)),
                ('create_date', models.DateTimeField(auto_now_add=True)),
                ('update_date', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('userid', models.SlugField(max_length=20, unique=True)),
                ('title', models.CharField(blank=True, max_length=30, null=True)),
                ('pic_full_name', models.CharField(blank=True, max_length=30, null=True)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('first_name', models.CharField(max_length=30, null=True)),
                ('last_name', models.CharField(blank=True, max_length=30, null=True)),
                ('position', models.CharField(blank=True, max_length=30, null=True)),
                ('website', models.CharField(blank=True, max_length=30, null=True)),
                ('phone', models.CharField(max_length=15, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('profile_picture', models.ImageField(default='dummy-profile-pic-male1.webp', null=True, upload_to='static/media/user/')),
                ('address', models.TextField(blank=True, null=True)),
                ('city', models.CharField(max_length=30, null=True)),
                ('state', models.CharField(blank=True, max_length=30, null=True)),
                ('zip_postal_code', models.CharField(max_length=30, null=True)),
                ('country', django_countries.fields.CountryField(blank=True, max_length=2, null=True)),
                ('role', models.IntegerField(choices=[(1, 'Administrator'), (2, 'Staff'), (3, 'Instructor'), (4, 'Student')], default=1)),
                ('staff', models.BooleanField(default=False)),
                ('admin', models.BooleanField(default=False)),
                ('status', models.BooleanField(default=True)),
                ('create_date', models.DateTimeField(auto_now_add=True)),
                ('update_date', models.DateTimeField(auto_now=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
        ),
    ]
